// Generated by CoffeeScript 2.4.1
(function() {
  //!/bin/env/ coffee

  //  ws_rmi_connection

  var Back_Reference, Client, Column, DB_ORM, DB_Object, DB_RMI_Client, DB_RMI_Connection, Local_Method, Pool, Reference, SQL_Column, SQL_Date, SQL_Integer, SQL_String, Table, Table_Row, WS_RMI_Client, WS_RMI_Connection, WS_RMI_Object, WS_RMI_Stub, WebSocket, _by_, client, db_schema, inspect, local_options, log, pg_options, random_id, remote_options, repl, util, ws_rmi,
    indexOf = [].indexOf,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  if (typeof window === "undefined" || window === null) {
    util = require('util');
  }

  inspect = function(obj) {
    var options;
    options = {
      showHidden: false,
      depth: null,
      colors: true
    };
    return util.inspect(obj, options);
  };

  log = function(heading, ...args) {
    args = args.map(inspect).join('\n');
    return console.log(`\n\n${heading}\n${args}\n\n`);
  };

  log = console.log;

  //----------------------------------------------------------------------
  WS_RMI_Connection = class WS_RMI_Connection {
    // WS_RMI_Connection is basically just a wrapper around a websocket
    // and is intendend to be applied on both ends of the socket.  @owner
    // is the ws_rmi_client or the ws_rmi_server which established this
    // end of the websocket.

    // The idea here is that the connection, once established, is
    // symmetrical with both ends having the ability to request a remote
    // method invocation and to respond to such requests.

    // TODO: I have not settled the design as yet.  Previously the RMI's
    // were requested by a WS_RMI_Client and responded to by a
    // WS_RMI_Server.  My current thinking is that that functionality
    // might be better off here.

    constructor(owner, ws1, log_level) {
      var i, len, obj, ref;
      //--------------------------------------------------------------------
      // Event handlers

      // TODO: is this event handled here or in client and server?  Seems
      // like by the time the connection object is constructed it's already
      // open.  Could it be closed and opened again?  I wouldn't think so
      // unless I implement that in the server and client code.  It'd have
      // to keep stale connection objects around and re-activate them when
      // connected again.

      this.onOpen = this.onOpen.bind(this);
      // This is the "main event".  It's what we've all been waiting for!
      this.onMessage = this.onMessage.bind(this);
      // TODO: perhaps somebody should be notified here ?-)
      // Who wanted this connection in the first place?  Do we
      // have their contact info?

      this.onClose = this.onClose.bind(this);
      // TODO: think of something to do here.
      this.onError = this.onError.bind(this);
      this.disconnect = this.disconnect.bind(this);
      //----------------------------------------------------------
      // Object registry methods

      // Register a WS_RMI_Object for RMI
      this.add_object = this.add_object.bind(this);
      this.register = this.register.bind(this);
      // I refuse to comment on what this one does.
      this.del_object = this.del_object.bind(this);
      // Method init() is a built-in remote method.
      this.get_stub_specs = this.get_stub_specs.bind(this);
      // Invoke remote init()
      this.init_stubs = this.init_stubs.bind(this);
      //--------------------------------------------------------------------
      // Generic messaging methods

      // JSON.stringify and send.  Returns a promise.
      this.send_message = this.send_message.bind(this);
      // JSON.parse and handle as appropriate.
      this.recv_message = this.recv_message.bind(this);
      //--------------------------------------------------------------------
      // Methods to Send and Receive RMI Requests

      // Method send_request()
      this.send_request = this.send_request.bind(this);
      // Method recv_request()
      this.recv_request = this.recv_request.bind(this);
      //--------------------------------------------------------------------
      //  Methods to Send and Receive RMI Responses

      // Method send_response()
      this.send_response = this.send_response.bind(this);
      // Method recv_resonse()
      this.recv_response = this.recv_response.bind(this);
      this.owner = owner;
      this.ws = ws1;
      this.log_level = log_level || 0;
      // TODO: Need a unique id here. Does this work ok?
      //@id = "#{ws._socket.server._connectionKey}"
      this.id = "connection";
      // WS_RMI_Objects are registered here with their id as key.  The
      // registry is used by method recv_request() which receives just an
      // id in the message and must look up the object to invoke it's
      // method.

      this.registry = {};
      this.exclude = [];
      // Pseudo-object 'admin' with method 'init'

      // TODO: Is it better to use this pseudo-object approach or just
      // instantiate WS_RMI_Object to the same effect?  The point is that
      // 'admin' is special in that it is present at Connection creation
      // time.  It should be excluded from init() responses since the
      // caller already has it.  Should it then be excluded from the
      // registry or just skipped over when responding to init?  The
      // benefit of including it in the registry is that it requires no
      // special treatment in method recv_request().  My current choice
      // is to include it in the registry here and skip over it in
      // init().

      // In the future there may be other objects of this administrative
      // sort.  Maybe a more structured general solution should be
      // considered.

      this.admin = {
        id: 'admin',
        name: 'admin',
        get_stub_specs: this.get_stub_specs,
        method_names: ['get_stub_specs']
      };
      this.registry['admin'] = this.admin;
      this.exclude.push('admin');
      this.stubs = {};
      // RMI's are given a unique number and the Promise's resolve() and
      // reject() functions are kept as callbacks to be executed when an
      // RMI response is received. Properties @rmi_cnt and @rmi_hash are
      // each written and read by methods send_request() and
      // recv_response().

      this.rmi_cnt = 0;
      this.rmi_hash = {};
      ref = this.owner.objects;
      // add remote objects
      for (i = 0, len = ref.length; i < len; i++) {
        obj = ref[i];
        this.add_object(obj);
      }
      // Events are mapped to handler methods defined below.
      this.ws.onopen = this.onOpen;
      this.ws.onmessage = this.onMessage;
      this.ws.onclose = this.onClose;
      this.ws.onerror = this.onError;
      true;
    }

    onOpen(evt) {
      if (this.log_level > 0) {
        return log("connection opened: id:", this.id);
      }
    }

    onMessage(evt) {
      if (this.log_level > 2) {
        log("onMessage:", evt.data);
      }
      return this.recv_message(evt.data);
    }

    onClose(evt) {
      if (this.log_level > 0) {
        return log("peer disconnected: id:", this.id);
      }
    }

    onError(evt) {}

    disconnect() {
      if (this.log_level > 0) {
        log("disconnecting: id: ", this.id);
      }
      return this.ws.close();
    }

    add_object(obj) {
      this.registry[obj.id] = obj;
      return obj.register(this);
    }

    register(obj) {
      return this.registry[obj.id] = obj;
    }

    del_object(id) {
      return delete this.registry[id];
    }

    get_stub_specs() {
      return new Promise((resolve, reject) => {
        var error, id, obj, ref, specs;
        try {
          specs = {};
          ref = this.registry;
          for (id in ref) {
            obj = ref[id];
            if (indexOf.call(this.exclude, id) < 0) {
              specs[id] = {
                name: obj.name,
                method_names: obj.method_names
              };
            }
          }
          if (this.log_level > 2) {
            log("init():", specs);
          }
          return resolve(specs);
        } catch (error1) {
          error = error1;
          log("Error: init():", specs, error);
          return reject("Error: init():", specs);
        }
      });
    }

    init_stubs() {
      var cb, eh;
      cb = (result) => {
        var id, method_names, name, results, spec, stub;
        if (this.log_level > 2) {
          log("init_stubs(): cb(): result:", result);
        }
        results = [];
        for (id in result) {
          spec = result[id];
          ({name, method_names} = spec);
          stub = new WS_RMI_Stub(id, name, method_names, this);
          results.push(this.stubs[stub.name] = stub);
        }
        return results;
      };
      eh = (error) => {
        if (this.log_level > 2) {
          log("init_stub(): eh(): received error:", error);
        }
        return new Error("init_stub(): eh(): received error:");
      };
      return this.send_request('admin', 'get_stub_specs', []).then(cb).catch(eh);
    }

    send_message(data_obj) {
      var error;
      if (this.log_level > 2) {
        log("send_message(): data_obj:", data_obj);
      }
      try {
        return this.ws.send(JSON.stringify(data_obj));
      } catch (error1) {
        error = error1;
        log("Error: send_message(): data_obj:", data_obj);
        return new Error(`send_message(): Error sending:\n ${inspect(data_obj)}`);
      }
    }

    recv_message(data) {
      var data_obj, msg, type;
      data_obj = JSON.parse(data);
      if (this.log_level > 2) {
        log("recv_message(): data_obj:", data_obj);
      }
      ({type, msg} = data_obj);
      if (type === 'request') {
        return this.recv_request(msg);
      }
      if (type === 'response') {
        return this.recv_response(msg);
      } else {
        return new Error(`recv_message(): invalid type ${type}`);
      }
    }

    send_request(obj_id, method, args) {
      var msg;
      msg = {
        obj_id: obj_id,
        method: method,
        args: args
      };
      if (this.log_level > 0) {
        log("send_request(): msg:", msg);
      }
      return new Promise((resolve, reject) => {
        var error;
        try {
          msg.rmi_id = this.rmi_cnt++;
          this.rmi_hash[msg.rmi_id] = {
            msg: msg,
            resolve: resolve,
            reject: reject
          };
          return this.send_message({
            type: 'request',
            msg: msg
          });
        } catch (error1) {
          error = error1;
          return reject("send_message(): Error: data_obj:", data_obj);
        }
      });
    }

    recv_request(msg) {
      var args, cb, eh, method, obj, obj_id, rmi_id;
      if (this.log_level > 0) {
        log("recv_request(): msg:", msg);
      }
      ({obj_id, method, args, rmi_id} = msg);
      // callback used below
      cb = (res) => {
        return this.send_response(rmi_id, res, null);
      };
      // error handler used below
      eh = (err) => {
        return this.send_response(rmi_id, null, err);
      };
      // Look up the object and apply the method to the args.
      // Method is assumed to return a promise.

      obj = this.registry[obj_id];
      return obj[method].apply(obj, args).then(cb).catch(eh);
    }

    send_response(rmi_id, result, error) {
      var msg;
      msg = {
        rmi_id: rmi_id,
        result: result,
        error: error
      };
      if (this.log_level > 0) {
        log("send_response(): msg:", msg);
      }
      return new Promise((resolve, reject) => {
        try {
          return this.send_message({
            type: 'response',
            msg: msg
          });
        } catch (error1) {
          error = error1;
          log("Error in send_response():", msg);
          return reject({rmi_id, result, error});
        }
      });
    }

    recv_response(response) {
      var error, reject, request, resolve, result, rmi_id;
      if (this.log_level > 0) {
        log("recv_response(): response:", response);
      }
      try {
        ({rmi_id, result, error} = response);
        ({request, resolve, reject} = this.rmi_hash[rmi_id]);
        if (error) {
          return reject({request, error});
        } else {
          return resolve(result);
        }
      } catch (error1) {
        error = error1;
        return reject({request, error});
      }
    }

  };

  //----------------------------------------------------------------------
  // WS_RMI_Object

  // used in WS_RMI_Object constructor
  random_id = function(name) {
    return `${name}_${(Math.random().toString().slice(2))}`;
  };

  // WS_RMI_Object wraps a regular coffeescript class instance object,
  // exposing only those methods explicitly intended for RMI.

  WS_RMI_Object = class WS_RMI_Object {
    constructor(name1, obj1, method_names1, log_level) {
      var i, len, name, ref;
      this.register = this.register.bind(this);
      this.name = name1;
      this.obj = obj1;
      this.method_names = method_names1;
      this.log_level = log_level || 0;
      this.id = random_id(this.name);
      ref = this.method_names;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        this[name] = ((name) => {
          return function(...args) {
            return this.invoke(name, args);
          };
        })(name);
      }
    }

    register(connection) {
      return this.connection = connection;
    }

    // Method invoke() is called by connection.recv_request()
    // it executes the appropriate method and returns a promise.

    invoke(method_name, args) {
      var eh;
      // error handler used in .catch() just below.
      eh = (err) => {
        var msg;
        msg = "\nWS_RMI_Object:";
        msg += {
          id: this.id,
          method: name,
          args: args
        }.toString();
        return new Error(msg);
      };
      if (this.log_level > 1) {
        log("invoke(): ", {method_name, args});
      }
      // call the method of the underlying object
      return this.obj[method_name].apply(this.obj, args); // .catch(eh)
    }

  };

  
  //-----------------------------------------------------------------------
  // WS_RMI_Stub
  WS_RMI_Stub = class WS_RMI_Stub {
    constructor(id1, name1, method_names1, connection1, log_level) {
      var i, len, name, ref;
      this.id = id1;
      this.name = name1;
      this.method_names = method_names1;
      this.connection = connection1;
      this.log_level = log_level || 0;
      ref = this.method_names;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        this[name] = ((name) => {
          return function(...args) {
            return this.invoke(name, args);
          };
        })(name);
      }
    }

    // Method invoke() implements local stub methods by calling
    // WS_RMI_Connection.send_request() which returns a Promise.

    invoke(name, args) {
      var eh;
      if (this.log_level > 1) {
        log("invoke(): ", {name, args});
      }
      eh = (err) => {
        var msg;
        msg = "\nWS_RMI_Stub:";
        msg += {
          id: this.id,
          method: name,
          args: args
        }.toString();
        return new Error(msg);
      };
      return this.connection.send_request(this.id, name, args).catch(eh);
    }

  };

  //----------------------------------------------------------------------
  if (typeof window === "undefined" || window === null) {
    exports.WS_RMI_Connection = WS_RMI_Connection;
    exports.WS_RMI_Object = WS_RMI_Object;
    exports.WS_RMI_Stub = WS_RMI_Stub;
  } else {
    window.WS_RMI_Connection = WS_RMI_Connection;
    window.WS_RMI_Object = WS_RMI_Object;
    window.WS_RMI_Stub = WS_RMI_Stub;
  }

  //!/bin/env/ coffee

  // ws_rmi_client

  // works both in browser and in node
  WebSocket = (typeof window !== "undefined" && window !== null ? window.WebSocket : void 0) || require('ws');

  if (typeof window === "undefined" || window === null) {
    ({WS_RMI_Connection} = require('./app'));
  }

  WS_RMI_Client = class WS_RMI_Client {
    // Connnection should be a sub-class of WS_RMI_Connection in order to
    // create and register desired WS_RMI_Objects at construction.

    constructor(options, objects, Connection) {
      this.connect = this.connect.bind(this);
      this.objects = objects;
      this.Connection = Connection || WS_RMI_Connection;
      this.id = `WS_RMI_Client-${(Math.random().toString().slice(2))}`;
      ({host: this.host, port: this.port, path: this.path, protocol: this.protocol, log_level: this.log_level} = options);
      this.url = `${this.protocol}://${this.host}:${this.port}/${this.path}`;
    }

    connect(url) {
      var error, msg, ws;
      try {
        if (url) {
          this.url = url;
        }
        ws = new WebSocket(this.url);
        this.connection = new this.Connection(this, ws, this.log_level);
        console.log(`Connection added, id: ${this.connection.id}`);
      } catch (error1) {
        error = error1;
        msg = "\nWS_RMI_Client: connect failed.";
        msg += ` url: ${this.url}`;
        return new Error(msg);
      }
    }

  };

  if (typeof window === "undefined" || window === null) {
    exports.WS_RMI_Client = WS_RMI_Client;
  } else {
    window.WS_RMI_Client = WS_RMI_Client;
  }

  //!/usr/bin/env coffee
  // -*- coding: utf-8 -*-

  //  db_orm.coffee

  if (typeof window === "undefined" || window === null) {
    ({Client, Pool} = require('pg'));
  }

  //-------------------------------------------------------------------------------

  //  Column definitions

  //  Each must have a '__method()' method (Yeah, I know. Sorry !-)
  //  which returns a method to be added to the @__Row_Class()
  //  definition in class Table, (q.v.)  It's convoluted but the
  //  end result is that each Table has a corresponding Row_Class
  //  method that is used to to create new Table_Rows from simple
  //  Javascript object such as that returned by a db query.

  Column = class Column {
    constructor(spec) {
      this.__method = this.__method.bind(this);
      ({table_name: this.table_name, col_name: this.col_name, options: this.options} = spec);
    }

    __method() {
      var error;
      try {
        return this.__column_method();
      } catch (error1) {
        error = error1;
        return console.log(`Error in ${this.constructor.name} method.`);
      }
    }

  };

  Local_Method = class Local_Method extends Column {
    constructor(spec) {
      super(spec);
      this.__column_method = this.__column_method.bind(this);
      ({method: this.method} = this.options);
      this.sql_column = false;
    }

    __column_method() {
      boundMethodCheck(this, Local_Method);
      return this.method;
    }

  };

  Reference = class Reference extends Column {
    constructor(spec) {
      super(spec);
      this.__column_method = this.__column_method.bind(this);
      this.sql_column = false;
    }

    __column_method() {
      var col_name, table_name;
      boundMethodCheck(this, Reference);
      ({table_name, col_name} = this.options);
      return function() {
        var key, table;
        table = this.__db.tables[table_name];
        key = this.__obj[col_name];
        return table.find_by_primary_key(key);
      };
    }

  };

  Back_Reference = class Back_Reference extends Column {
    constructor(spec) {
      super(spec);
      this.__column_method = this.__column_method.bind(this);
      this.sql_column = false;
    }

    __column_method() {
      var col_name, table_name;
      boundMethodCheck(this, Back_Reference);
      ({table_name, col_name} = this.options);
      return function() {
        var table;
        table = this.__db.tables[table_name];
        return table.find_where(col_name, this.__id);
      };
    }

  };

  SQL_Column = class SQL_Column extends Column {
    constructor(options) {
      super(options);
      this.__column_method = this.__column_method.bind(this);
      this.sql_column = true;
    }

    __column_method() {
      var name;
      boundMethodCheck(this, SQL_Column);
      name = this.col_name;
      return function() {
        return this.__obj[name];
      };
    }

  };

  SQL_String = class SQL_String extends SQL_Column {};

  SQL_Integer = class SQL_Integer extends SQL_Column {};

  SQL_Date = class SQL_Date extends SQL_Column {};

  
  //-------------------------------------------------------------------------------
  // CLASS TABLE_ROW

  // Class Table_Row is the companion to class Table (below) A Table_Row
  // corresponds to a row in the in the PostgreSQL table.  Note that the
  // constructor requires a @__table argument.  Classes which extend
  // Table Row must call super(table) in order to link the row type to
  // the appropriate table instance.

  Table_Row = class Table_Row {
    constructor(__table, __obj) {
      this.simple_obj = this.simple_obj.bind(this);
      this.toJSON = this.toJSON.bind(this);
      this.toString = this.toString.bind(this);
      this.toHTML = this.toHTML.bind(this);
      this.__table = __table;
      this.__obj = __obj;
      this.__db = this.__table.__db;
      this.__id = this.__obj[this.__table.__primary_key];
      this.__unique_id = `${this.__table.__name}-${this.__id}`;
    }

    simple_obj() {
      var col, obj, ref, val;
      obj = {};
      ref = this.__obj;
      for (col in ref) {
        val = ref[col];
        obj[col] = val;
      }
      return obj;
    }

    toJSON() {
      return JSON.stringify(this.simple_obj());
    }

    toString() {
      return this.toJSON();
    }

    toHTML() {}

  };

  // some suitable default

  //-------------------------------------------------------------------------------
  // CLASS TABLE

  // A Table corresponds to a table in the PostgreSQL DB.

  Table = class Table {
    constructor(spec) {
      var column, name, ref;
      
      // TODO: insert into DB
      this.insert = this.insert.bind(this);
      this.__add_row = this.__add_row.bind(this);
      this.find_all = this.find_all.bind(this);
      this.find_by_id = this.find_by_id.bind(this);
      this.find_by_primary_key = this.find_by_primary_key.bind(this);
      this.find_one = this.find_one.bind(this);
      this.find_where = this.find_where.bind(this);
      this.__remove_row = this.__remove_row.bind(this);
      this.__db = spec.db;
      this.__name = spec.name;
      this.__method_names = ['find_by_id', 'find_by_primary_key', 'find_all', 'find_where'];
      this.__primary_key = spec.primary_key || 'id';
      this.__row_methods = {};
      ref = spec.columns;
      for (name in ref) {
        column = ref[name];
        this.__row_methods[name] = column.__method(name);
      }
      this.__Row_Class = this.__row_class(this);
      this.__rows = {};
      this.__unique_id = `table-${this.__name}`;
    }

    __row_class(table) {
      var __Row_Class;
      return __Row_Class = class __Row_Class extends Table_Row {
        constructor(obj) {
          var method, name, ref;
          super(table, obj);
          ref = table.__row_methods;
          for (name in ref) {
            method = ref[name];
            this[name] = method; //.bind(this)
          }
        }

      };
    }

    insert(obj) {
      var col, cols, error, k, text, v, values;
      cols = (function() {
        var ref, results;
        ref = this.__sql_columns;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(k);
        }
        return results;
      }).call(this);
      text = `insert into ${this.__name}(${cols.join(',')})`;
      values = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = cols.length; i < len; i++) {
          col = cols[i];
          results.push(obj[col]);
        }
        return results;
      })();
      console.log(`Trying query:\n  text: "${text}"\n  values: [ ${values} ]\n`);
      try {

      } catch (error1) {
        // db.query(text, values)
        error = error1;
        return console.log(error.message);
      }
    }

    __add_row(obj) {
      var row;
      row = new this.__Row_Class(obj);
      return this.__rows[row.get_primary_key()] = row;
    }

    async find_all() {
      var error, row, rows, text, values;
      try {
        text = `select * from ${this.__name}`;
        values = [];
        rows = this.__db.query(text, values);
        return (await (async function() {
          var i, len, ref, results;
          ref = (await rows);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            row = ref[i];
            results.push(new this.__Row_Class(row));
          }
          return results;
        }).call(this));
      } catch (error1) {
        error = error1;
        return console.log(error.message);
      }
    }

    find_by_id(id) {
      return this.find_one('id', id);
    }

    find_by_primary_key(val) {
      return this.find_one(this.__primary_key, val);
    }

    async find_one(col, val) {
      return ((await this.find_where(col, val)))[0];
    }

    async find_where(col, val) {
      var error, row, rows, text, values;
      try {
        text = `select * from ${this.__name} where ${col} = $1 `;
        values = [val];
        rows = (await this.__db.query(text, values));
        return (await (async function() {
          var i, len, ref, results;
          ref = (await rows);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            row = ref[i];
            results.push(new this.__Row_Class(row));
          }
          return results;
        }).call(this));
      } catch (error1) {
        error = error1;
        return console.log(error.message);
      }
    }

    __remove_row(id) {
      return delete this.__rows[id];
    }

  };

  //-------------------------------------------------------------------------------
  // CLASS DB_Object

  DB_Object = class DB_Object {
    constructor(pg_options1, db_schema1) {
      this.get_db_schema = this.get_db_schema.bind(this);
      this.query = this.query.bind(this);
      this.pg_options = pg_options1;
      this.db_schema = db_schema1;
      this.pool = new Pool(this.pg_options);
    }

    get_db_schema() {
      return new Promise((resolve, reject) => {
        try {
          return resolve(this.db_schema);
        } catch (error1) {
          return reject("Could not get @db_schema.");
        }
      });
    }

    async query(text, values) {
      var client, error, msg, result;
      try {
        client = (await this.pool.connect().catch(function() {
          throw new Error("Failed to connect.");
        }));
        result = (await client.query(text, values).catch(function() {
          throw new Error("Failed to query.");
        }));
        client.release();
        return result.rows;
      } catch (error1) {
        error = error1;
        msg = `Query failed.\n text: "${text}"\n values: [${values}]\n`;
        throw new Error(msg);
      }
    }

  };

  DB_ORM = (function() {
    //-------------------------------------------------------------------------------
    // CLASS DB_ORM

    class DB_ORM {
      constructor(db_obj) {
        this.query = this.query.bind(this);
        this.init_tables = this.init_tables.bind(this);
        this.add_table = this.add_table.bind(this);
        this.db_obj = db_obj;
      }

      query(text, values) {
        return this.db_obj.query(text, values);
      }

      async init_tables() {
        var def, name, ref, results;
        this.db_schema = this.db_obj.get_db_schema();
        this.tables = {};
        ref = (await this.db_schema);
        results = [];
        for (name in ref) {
          def = ref[name];
          results.push(this.add_table(name, def));
        }
        return results;
      }

      add_table(table_name, table_def) {
        var Column_Class, col_def, col_name, columns, k, options, primary_key, type, v;
        columns = {};
        for (col_name in table_def) {
          col_def = table_def[col_name];
          // should be just one key and value
          [type, options] = ((function() {
            var results;
            results = [];
            for (k in col_def) {
              v = col_def[k];
              results.push([k, v]);
            }
            return results;
          })())[0];
          if (options.primary_key) {
            primary_key = col_name;
          }
          Column_Class = this.column_Class[type];
          columns[col_name] = new Column_Class({
            table_name: table_name,
            col_name: col_name,
            options: options
          });
        }
        return this.tables[table_name] = new Table({
          db: this,
          name: table_name,
          primary_key: primary_key || 'id',
          columns: columns
        });
      }

    };

    // map DB_WORM column definition to class
    DB_ORM.prototype.column_Class = {
      string: SQL_String,
      integer: SQL_Integer,
      date: SQL_Date,
      reference: Reference,
      back_reference: Back_Reference,
      local_method: Local_Method
    };

    return DB_ORM;

  }).call(this);

  if (typeof window === "undefined" || window === null) {
    exports.DB_ORM = DB_ORM;
    exports.DB_Object = DB_Object;
  }

  //!/usr/bin/env coffee
  // -*- coding: utf-8 -*-

  //  db_rmi_client.coffee

  if (typeof window === "undefined" || window === null) {
    ws_rmi = require('ws_rmi');
    WS_RMI_Connection = ws_rmi.Connection;
    WS_RMI_Client = ws_rmi.Client;
    ({DB_ORM, DB_Object} = require('./db_orm'));
  }

  DB_RMI_Connection = class DB_RMI_Connection extends WS_RMI_Connection {
    constructor() {
      super(...arguments);
      this.init_stubs = this.init_stubs.bind(this);
      this.init_db = this.init_db.bind(this);
    }

    init_stubs() {
      boundMethodCheck(this, DB_RMI_Connection);
      return super.init_stubs().then(this.init_db);
    }

    init_db() {
      boundMethodCheck(this, DB_RMI_Connection);
      return this.db = new DB_ORM(this.stubs.db_obj);
    }

  };

  DB_RMI_Client = class DB_RMI_Client extends WS_RMI_Client {
    constructor(options) {
      super(options, [], DB_RMI_Connection);
    }

  };

  if (typeof window === "undefined" || window === null) {
    exports.DB_RMI_Client = DB_RMI_Client;
  }

  
  //!/usr/bin/env coffee
  // -*- coding: utf-8 -*-

  //  db_schema.coffee

  // comparison function suitable for sorting by column

  _by_ = function(col) {
    return function(a, b) {
      var a_val, b_val;
      a_val = a[col]().valueOf();
      b_val = b[col]().valueOf();
      return (a_val < b_val ? -1 : 1);
    };
  };

  db_schema = {
    conference: {
      abbrev_name: {
        string: {
          primary_key: true
        }
      },
      name: {
        string: {}
      },
      logo: {
        string: {}
      },
      teams: {
        back_reference: {
          table_name: 'team',
          col_name: 'conference_name'
        }
      }
    },
    team: {
      id: {
        integer: {
          primary_key: true
        }
      },
      name: {
        string: {}
      },
      nickname: {
        string: {}
      },
      logo: {
        string: {}
      },
      espn_id: {
        integer: {}
      },
      city: {
        string: {}
      },
      state: {
        string: {}
      },
      conference_name: {
        string: {}
      },
      conference: {
        reference: {
          table_name: 'conference',
          col_name: 'conference_name'
        }
      },
      home_games: {
        back_reference: {
          table_name: 'game',
          col_name: 'home_team_id'
        }
      },
      away_games: {
        back_reference: {
          table_name: 'game',
          col_name: 'visiting_team_id'
        }
      },
      full_name: {
        local_method: {
          method: function() {
            return `${this.name()} ${this.nickname()}`;
          }
        }
      },
      games: {
        local_method: {
          method: async function() {
            var away_games, games, home_games;
            away_games = (await this.away_games());
            home_games = (await this.home_games());
            games = away_games.concat(home_games);
            return games.sort(_by_('date'));
          }
        }
      }
    },
    game: {
      id: {
        integer: {
          primary_key: true
        }
      },
      home_team_id: {
        integer: {}
      },
      visiting_team_id: {
        integer: {}
      },
      date: {
        date: {}
      },
      home_team: {
        reference: {
          table_name: 'team',
          col_name: 'home_team_id'
        }
      },
      visiting_team: {
        reference: {
          table_name: 'team',
          col_name: 'visiting_team_id'
        }
      },
      tickets: {
        back_reference: {
          table_name: 'ticket_lot',
          col_name: 'game_id'
        }
      }
    },
    ticket_user: {
      id: {
        integer: {
          primary_key: true
        }
      },
      name: {
        string: {}
      },
      email: {
        string: {}
      },
      picture: {
        string: {}
      },
      ticket_lots: {
        back_reference: {
          table_name: 'ticket_lot',
          col_name: 'user_id'
        }
      }
    },
    ticket_lot: {
      id: {
        integer: {
          primary_key: true
        }
      },
      user_id: {
        integer: {}
      },
      game_id: {
        integer: {}
      },
      section: {
        string: {}
      },
      row: {
        string: {}
      },
      price: {
        string: {}
      },
      img_path: {
        string: {}
      },
      seller: {
        reference: {
          table_name: 'ticket_user',
          col_name: 'seller_id'
        }
      },
      buyer: {
        reference: {
          table_name: 'ticket_user',
          col_name: 'buyer_id'
        }
      },
      game: {
        reference: {
          table_name: 'game',
          col_name: 'game_id'
        }
      },
      tickets: {
        back_reference: {
          table_name: 'ticket',
          col_name: 'lot_id'
        }
      },
      num_seats: {
        local_method: {
          method: async function() {
            return ((await this.tickets())).length;
          }
        }
      },
      seats: {
        local_method: {
          method: async function() {
            var i, len, ref, results, ticket;
            ref = ((await tickets())).sort();
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              ticket = ref[i];
              results.push(ticket.seat());
            }
            return results;
          }
        }
      }
    },
    ticket: {
      id: {
        string: {
          primary_key: true
        }
      },
      lot_id: {
        string: {}
      },
      seat: {
        string: {}
      },
      lot: {
        reference: {
          name_name: 'ticket_lot',
          col_name: 'lot_id'
        }
      }
    }
  };

  if (typeof window === "undefined" || window === null) {
    exports.db_schema = db_schema;
  }

  //!/usr/bin/env coffee

  //  settings.coffee

  pg_options = {
    host: '/var/run/postgresql',
    database: 'tickets'
  };

  local_options = {
    host: 'localhost',
    port: 8086,
    path: '',
    protocol: 'ws',
    log_level: 2
  };

  remote_options = {
    host: 'alcarruth.net',
    port: 443,
    path: '/wss/tickets_coffee',
    protocol: 'wss',
    log_level: 2
  };

  if (typeof window === "undefined" || window === null) {
    exports.pg_options = pg_options;
    exports.local_options = local_options;
    exports.remote_options = remote_options;
  }

  //!/usr/bin/env coffee

  //  client.coffee

  if (typeof window === "undefined" || window === null) {
    ({DB_RMI_Client} = require('db_worm'));
    ({db_schema} = require('./db_schema'));
    ({remote_options} = require('./settings'));
  }

  client = new DB_RMI_Client(remote_options);

  if (typeof window === "undefined" || window === null) {
    if (module.parent) {
      exports.client = client;
    } else {
      // invoked from command line start REPL
      repl = require('repl');
      repl.start('client> ').context.client = client;
    }
  } else {
    window.client = client;
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/var/www/git/projects/tickets_coffee/src/build/web_tix.coffee