// Generated by CoffeeScript 2.6.1
(function() {
  //!/usr/bin/env coffee

  //  web-tix/src/db_schema.coffee

  // comparison function suitable for sorting by column

  var _by_, db_schema;

  _by_ = function(col) {
    return function(a, b) {
      var a_val, b_val;
      a_val = a[col]().valueOf();
      b_val = b[col]().valueOf();
      return (a_val < b_val ? -1 : 1);
    };
  };

  db_schema = {
    conference: {
      abbrev_name: {
        string: {
          primary_key: true
        }
      },
      name: {
        string: {}
      },
      logo: {
        string: {}
      },
      teams: {
        back_reference: {
          table_name: 'team',
          col_name: 'conference_name'
        }
      }
    },
    team: {
      id: {
        integer: {
          primary_key: true
        }
      },
      name: {
        string: {}
      },
      nickname: {
        string: {}
      },
      logo: {
        string: {}
      },
      espn_id: {
        integer: {}
      },
      city: {
        string: {}
      },
      state: {
        string: {}
      },
      conference_name: {
        string: {}
      },
      conference: {
        reference: {
          table_name: 'conference',
          col_name: 'conference_name'
        }
      },
      home_games: {
        back_reference: {
          table_name: 'game',
          col_name: 'home_team_id'
        }
      },
      away_games: {
        back_reference: {
          table_name: 'game',
          col_name: 'visiting_team_id'
        }
      },
      full_name: {
        local_method: {
          method: function() {
            return `${this.name()} ${this.nickname()}`;
          }
        }
      },
      games: {
        local_method: {
          method: async function() {
            var away_games, games, home_games;
            away_games = (await this.away_games());
            home_games = (await this.home_games());
            games = away_games.concat(home_games);
            return games.sort(_by_('date'));
          }
        }
      }
    },
    game: {
      id: {
        integer: {
          primary_key: true
        }
      },
      home_team_id: {
        integer: {}
      },
      visiting_team_id: {
        integer: {}
      },
      date: {
        date: {}
      },
      home_team: {
        reference: {
          table_name: 'team',
          col_name: 'home_team_id'
        }
      },
      visiting_team: {
        reference: {
          table_name: 'team',
          col_name: 'visiting_team_id'
        }
      },
      tickets: {
        back_reference: {
          table_name: 'ticket_lot',
          col_name: 'game_id'
        }
      }
    },
    ticket_user: {
      id: {
        integer: {
          primary_key: true
        }
      },
      name: {
        string: {}
      },
      email: {
        string: {}
      },
      picture: {
        string: {}
      },
      ticket_lots: {
        back_reference: {
          table_name: 'ticket_lot',
          col_name: 'user_id'
        }
      }
    },
    ticket_lot: {
      id: {
        integer: {
          primary_key: true
        }
      },
      user_id: {
        integer: {}
      },
      game_id: {
        integer: {}
      },
      section: {
        string: {}
      },
      row: {
        string: {}
      },
      price: {
        string: {}
      },
      img_path: {
        string: {}
      },
      seller: {
        reference: {
          table_name: 'ticket_user',
          col_name: 'seller_id'
        }
      },
      buyer: {
        reference: {
          table_name: 'ticket_user',
          col_name: 'buyer_id'
        }
      },
      game: {
        reference: {
          table_name: 'game',
          col_name: 'game_id'
        }
      },
      tickets: {
        back_reference: {
          table_name: 'ticket',
          col_name: 'lot_id'
        }
      },
      num_seats: {
        local_method: {
          method: async function() {
            return ((await this.tickets())).length;
          }
        }
      },
      seats: {
        local_method: {
          method: async function() {
            var i, len, ref, results, ticket;
            ref = ((await tickets())).sort();
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              ticket = ref[i];
              results.push(ticket.seat());
            }
            return results;
          }
        }
      }
    },
    ticket: {
      id: {
        string: {
          primary_key: true
        }
      },
      lot_id: {
        string: {}
      },
      seat: {
        string: {}
      },
      lot: {
        reference: {
          name_name: 'ticket_lot',
          col_name: 'lot_id'
        }
      }
    }
  };

  //if not window?
  exports.db_schema = db_schema;

}).call(this);
